from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hide_link

from tgbot.keyboards.inline.iadmins import AdminsInlineMarkup
from tgbot.keyboards.inline.itools import ToolsInlineMarkup
from tgbot.misc.states import EditProductStorage
from tgbot.models.products import Product


def show_product_text(product_id):
    text = f'{hide_link(product_id.url_img)}' \
           f'üì´ –ê—Ä—Ç–∏–∫–ª: <b><i>{product_id.item_id}</i></b>\n' \
           f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <b><i>{product_id.name}</i></b>\n' \
           f'üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b><i>{product_id.quantity}</i></b>\n' \
           f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: <b><i>{product_id.description}</i></b>\n' \
           f'üí∞ –¶–µ–Ω–∞: <b><i>{product_id.price} ‚ÇΩ</i></b>'
    return text


async def edit_product_search(call: CallbackQuery, callback_data: dict, state: FSMContext):
    sessionmaker = call.bot.get('db')

    check_product = await Product.get_product(sessionmaker, int(callback_data['item_id']))
    if check_product is None:
        return await call.message.answer('‚ùå –û—à–∏–±–∫–∞!\n–¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞—Ä–∞—â–∏–≤–∞–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')

    await call.message.delete()
    await call.message.answer_photo(check_product.url_img,
                                    show_product_text(check_product),
                                    reply_markup=AdminsInlineMarkup().edit(int(check_product.item_id)))
    await state.update_data(old=check_product)


async def edit_product_all(call: CallbackQuery, callback_data: dict, state: FSMContext):
    product_id = callback_data.get('item_id')
    button = callback_data.get('button')
    prefix = {'name': '–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
              'description': '–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>',
              'price': '—é <b>—Å—Ç–æ–∏–º–æ—Å—Ç—å</b>',
              'quantity': '–µ <b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>'}

    await call.message.delete()
    await call.message.answer(f'‚úè –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ{prefix[button]} —Ç–æ–≤–∞—Ä–∞')
    await state.update_data(button=button,
                            product_id=product_id)
    await EditProductStorage.edit_product_all.set()


async def edit_product_(message: Message, state: FSMContext):
    data = await state.get_data()
    if data['button'] == 'name':
        if len(message.text) > 100:
            await message.answer('‚ùå –û—à–∏–±–∫–∞\nüîñ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 100 —Å–∏–º–≤–æ–ª–æ–≤')
            return
    elif data['button'] == 'description':
        if len(message.text) > 600:
            await message.answer('‚ùå –û—à–∏–±–∫–∞\nüîñ –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ 600 —Å–∏–º–≤–æ–ª–æ–≤')
            return
    elif data['button'] == 'quantity':
        try:
            int(message.text)
        except ValueError:
            await message.answer('‚ùå –û—à–∏–±–∫–∞\nüîñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö!')
            return
        message.text = int(message.text)
    elif data['button'] == 'price':
        try:
            int(message.text)
        except ValueError:
            await message.answer('‚ùå –û—à–∏–±–∫–∞\nüîñ –°—Ç–æ–∏–º–æ—Ç—å —Ç–æ–≤–∞—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ü–∏—Ñ—Ä–∞—Ö!')
            return
        message.text = int(message.text)

    sessionmaker = message.bot.get('db')
    await Product.update_product(sessionmaker, int(data['product_id']), updated_fields={data['button']: message.text})
    product = await Product.get_product(sessionmaker, int(data['product_id']))
    prefix = {'name': '<b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b>',
              'description': '<b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>',
              'price': '<b>—Å—Ç–æ–∏–º–æ—Å—Ç—å</b>',
              'quantity': '<b>–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</b>'}
    await message.answer(f'‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ {prefix[data["button"]]} —Ç–æ–≤–∞—Ä–∞')
    await message.answer_photo(product.url_img,
                               show_product_text(product),
                               reply_markup=AdminsInlineMarkup().edit(int(product.item_id)))
    await state.finish()


def register_edit_product(dp: Dispatcher):
    dp.register_callback_query_handler(edit_product_search, ToolsInlineMarkup.edit_call.filter())
    dp.register_callback_query_handler(edit_product_all, AdminsInlineMarkup.product_call.filter())
    dp.register_message_handler(edit_product_, state=EditProductStorage.edit_product_all)
