import re

from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.markdown import hide_link

from tgbot.handlers.tools import tools_menu
from tgbot.keyboards.inline.iadmins import AdminsInlineMarkup
from tgbot.keyboards.inline.itools import ToolsInlineMarkup
from tgbot.misc.states import EditProductStorage
from tgbot.models.products import Product
from tgbot.models.users import User


async def edit_product_search(call: CallbackQuery, callback_data: dict, state: FSMContext):
    sessionmaker = call.bot.get('db')

    check_product = await Product.get_product(sessionmaker, int(callback_data['item_id']))
    if check_product is None:
        return await call.message.answer('‚ùå –û—à–∏–±–∫–∞!\n–¢–æ–≤–∞—Ä –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∑–∞—Ä–∞—â–∏–≤–∞–µ—Ç–µ –Ω–µ –Ω–∞–π–¥–µ–Ω')

    await state.finish()
    await call.message.edit_text(f'{hide_link(check_product.url_img)}'
                                 f'üì´ –ê—Ä—Ç–∏–∫–ª: <b><i>{check_product.item_id}</i></b>\n'
                                 f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <b><i>{check_product.name}</i></b>\n'
                                 f'üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b><i>{check_product.quantity}</i></b>\n'
                                 f'üìù –û–ø–∏—Å–∞–Ω–∏–µ: <b><i>{check_product.description}</i></b>\n'
                                 f'üí∞ –¶–µ–Ω–∞: <b><i>{check_product.price} ‚ÇΩ</i></b>',
                                 reply_markup=AdminsInlineMarkup().edit())
    await state.update_data(product_editing=check_product,
                            b_msg=call.message.message_id)


async def first_edit_product_name(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        msg = data['b_msg']

    await call.bot.edit_message_reply_markup(call.message.chat.id, msg)
    await call.message.answer('‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await EditProductStorage.edit_product_name.set()


async def edit_product_name(message: Message, state: FSMContext):
    async with state.proxy() as data:
        product = data['product_editing']

    sessionmaker = message.bot.get('db')
    await Product.update_product(sessionmaker, int(product.item_id),
                                 updated_fields={"name": message.text})
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!')
    await state.finish()
    await tools_menu(message, User)


async def first_edit_product_description(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        msg = data['b_msg']

    await call.bot.edit_message_reply_markup(call.message.chat.id, msg)
    await call.message.answer('‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞')
    await EditProductStorage.edit_product_description.set()


async def edit_product_description(message: Message, state: FSMContext):
    async with state.proxy() as data:
        product = data['product_editing']

    sessionmaker = message.bot.get('db')
    await Product.update_product(sessionmaker, int(product.item_id),
                                 updated_fields={"description": message.text})
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞!')
    await state.finish()
    await tools_menu(message, User)


async def catching_editing(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        msg = data['b_msg']

    await call.bot.edit_message_reply_markup(call.message.chat.id, msg)
    await call.message.answer(f'üî∫ –ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ\n'
                              f'–ù–∞–ø—Ä–∏–º–µ—Ä: 2, –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞ 2 –µ–¥–∏–Ω–∏—Ü—ã –±–æ–ª—å—à–µ\n'
                              f'üîª –ß—Ç–æ–±—ã —É–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º \n'
                              f'–ù–∞–ø—Ä–∏–º–µ—Ä: -2, –∫–æ–ª-–≤–æ —Ç–æ–≤–∞—Ä–∞ —Å—Ç–∞–Ω–µ—Ç –Ω–∞ 2 –µ–¥–∏–Ω–∏—Ü—ã –º–µ–Ω—å—à–µ')

    await EditProductStorage.edit_product_quantity.set()


async def catching_editing_quantity(message: Message, state: FSMContext):
    if not re.fullmatch(r'[-]?\d+', message.text):
        return await message.answer(f'‚ùå –û—à–∏–±–∫–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')

    async with state.proxy() as data:
        product = data['product_editing']

    sessionmaker = message.bot.get('db')
    await Product.update_product(sessionmaker, int(product.item_id),
                                 updated_fields={"quantity": product.quantity + int(message.text)})

    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞!')
    await state.finish()
    await tools_menu(message, User)


async def first_edit_product_price(call: CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        msg = data['b_msg']

    await call.bot.edit_message_reply_markup(call.message.chat.id, msg)
    await call.message.answer('‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞')
    await EditProductStorage.edit_product_price.set()


async def edit_product_price(message: Message, state: FSMContext):
    if not message.text.isnumeric():
        return await message.answer('‚ùå –û—à–∏–±–∫–∞\n'
                                    '–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–º –∏ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤')

    async with state.proxy() as data:
        product = data['product_editing']

    sessionmaker = message.bot.get('db')
    await Product.update_product(sessionmaker, int(product.item_id),
                                 updated_fields={"price": int(message.text)})
    await message.answer('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞!')
    await state.finish()
    await tools_menu(message, User)


def register_edit_product(dp: Dispatcher):
    dp.register_callback_query_handler(edit_product_search, ToolsInlineMarkup.edit_call.filter())
    dp.register_callback_query_handler(first_edit_product_name, text='edit_name')
    dp.register_message_handler(edit_product_name, state=EditProductStorage.edit_product_name)
    dp.register_callback_query_handler(first_edit_product_description, text='edit_description')
    dp.register_message_handler(edit_product_description, state=EditProductStorage.edit_product_description)
    dp.register_callback_query_handler(catching_editing, text='edit_quantity')
    dp.register_message_handler(catching_editing_quantity, state=EditProductStorage.edit_product_quantity)
    dp.register_callback_query_handler(first_edit_product_price, text='edit_price')
    dp.register_message_handler(edit_product_price, state=EditProductStorage.edit_product_price)
