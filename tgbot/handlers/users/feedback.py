from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery, ContentType

from tgbot.handlers.tools import tools_menu
from tgbot.keyboards.inline.itools import ToolsInlineMarkup
from tgbot.keyboards.inline.iusers import UsersInlineMarkup
from tgbot.misc.states import FeedbackStorage
from tgbot.models.users import User


async def start_feedback(call: CallbackQuery, state: FSMContext):
    await call.answer()
    await call.message.edit_text(
        'üì® –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\nüë• –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –æ—Ç–≤–µ—Ç—è—Ç –í–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç‚ùóÔ∏è',
        reply_markup=ToolsInlineMarkup().back())

    async with state.proxy() as data:
        data['bot_id'] = call.message.message_id
    await FeedbackStorage.feedback_start.set()


async def feedback_statement_message(message: Message, state: FSMContext):
    async with state.proxy() as data:
        bot_message = data['bot_id']
        data['message'] = message.message_id

    await message.bot.edit_message_reply_markup(message.chat.id, bot_message, reply_markup=None)
    await message.answer(f'üì© –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n‚ñ∂ <code>{message.text}</code>',
                         reply_markup=ToolsInlineMarkup().negotiate())
    await FeedbackStorage.feedback_statement.set()


async def feedback_statement(call: CallbackQuery, state: FSMContext, user: User):
    config = call.bot.get('config')
    async with state.proxy() as data:
        user_message = data['message']

    await call.message.edit_text('üì© <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ </b>‚òë')
    await call.bot.forward_message(chat_id=config.tg_bot.tech_groups, from_chat_id=call.message.chat.id,
                                   message_id=user_message)
    await state.finish()
    await call.message.answer('üóÇ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=UsersInlineMarkup().menu(user.admin))


async def response_from_admins(message: Message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if message.reply_to_message:
        await message.bot.send_message(chat_id=message.reply_to_message.forward_from.id,
                                       text='<b><i>----=== –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ ===----</i></b>\n\n' + message.text)
    else:
        await message.bot.send_message(chat_id=message.chat.id, text='–°–¥–µ–ª–∞–π –û—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä—É')


def register_feedback(dp: Dispatcher):
    config = dp.bot.get('config')
    dp.register_callback_query_handler(start_feedback, text="feedback_user")
    dp.register_message_handler(feedback_statement_message, content_types=ContentType.TEXT,
                                state=FeedbackStorage.feedback_start)
    dp.register_callback_query_handler(feedback_statement, text="nego_confirm",
                                       state=FeedbackStorage.feedback_statement)
    dp.register_message_handler(response_from_admins, chat_id=config.tg_bot.tech_groups)
