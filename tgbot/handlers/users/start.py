from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.types import Message, CallbackQuery

from tgbot.keyboards.inline.inline import UsersInlineMarkup
from tgbot.misc.states import StorageUsers
from tgbot.models.users import User


async def user_start(message: Message, user: User, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""

    if user.passed:
        return await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.get_mention()}!\n",
                                    reply_markup=UsersInlineMarkup().menu(user.admin))

    sessionmaker = message.bot.get('db')
    code = message.text if not message.is_command() else message.get_args()
    if not code or code == "connect_user":
        return await message.answer(f'‚ùå –£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!\n'
                                    f'–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è, '
                                    f'–ª–∏–±–æ –ø—Ä–æ–π–¥–∏—Ç–µ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ\n',
                                    reply_markup=UsersInlineMarkup().register())

    if not code.isdigit():
        return await message.answer('‚ùå –û—à–∏–±–∫–∞\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.',
                                    reply_markup=UsersInlineMarkup().register())

    check_user = await user.get_user(sessionmaker, int(code))
    if int(code) == user.telegram_id or check_user is None:
        return await message.answer('‚ùå –û—à–∏–±–∫–∞\n–î–∞–Ω–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.',
                                    reply_markup=UsersInlineMarkup().register())

    await state.update_data(referrer_user=check_user)
    await StorageUsers.register_user.set()
    await user_registration(message, state, user)


async def invite_code_input(call: CallbackQuery):
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤–≤–æ–¥–∏—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await call.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:")
    await StorageUsers.invite_code.set()


async def invite_code_check(message: Message, state: FSMContext, user: User):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    sessionmaker = message.bot.get('db')
    invite_code = await user.get_user_code(sessionmaker, message.text)

    if invite_code is None or message.text == user.invite_code:
        await state.finish()
        return await message.answer("‚ùå –û—à–∏–±–∫–∞\n–î–∞–Ω–Ω—ã–π –∫–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –µ–≥–æ –≤–≤–æ–¥–∞",
                                    reply_markup=UsersInlineMarkup().register())

    await state.update_data(referrer_user=invite_code)
    await StorageUsers.register_user.set()
    await user_registration(message, state, user)


async def user_registration(message: Message, state: FSMContext, user: User):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    sessionmaker = message.bot.get('db')
    data = await state.get_data()
    bot_username = (await message.bot.me).username
    invite_user = data.get("referrer_user")

    await user.update_user(sessionmaker, updated_fields={'passed': True})
    await user.update_user(sessionmaker, telegram_id=int(invite_user.telegram_id),
                           updated_fields={'balance': invite_user.balance + 10})
    await Referral.add_user(sessionmaker, message.from_user.id, invite_user.telegram_id)
    await message.bot.send_message(invite_user.telegram_id,
                                   f'–í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 –±–æ–Ω—É—Å —Ä—É–±–ª–µ–π!\n'
                                   f'–ó–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.get_mention()}\n'
                                   f'–í–∞—à –±–∞–ª–∞–Ω—Å: {invite_user.balance + 10} ‚ÇΩ')

    await message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –¥–æ—Å—Ç—É–ø! üéâ\n'
                         f'–í—ã –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º '
                         f'<a href="tg://user?id={invite_user.telegram_id}">{invite_user.full_name}</a>\n'
                         f'–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å 10 –±–æ–Ω—É—Å—ã—Ö —Ä—É–±–ª–µ–π, –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n'
                         f'–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/{bot_username}?start={message.from_user.id}',
                         reply_markup=await get_user_menu(user.admin))
    await state.finish()


def register_start(dp: Dispatcher):
    dp.register_message_handler(user_start, commands=["start"])
    dp.register_callback_query_handler(invite_code_input, text="invitation_code")
    dp.register_message_handler(invite_code_check, state=StorageUsers.invite_code)
    dp.register_message_handler(user_registration, state=StorageUsers.register_user)
