from aiogram import Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import CallbackQuery, Message

from tgbot.config import Config
from tgbot.keyboards.inline.itools import ToolsInlineMarkup
from tgbot.keyboards.inline.iusers import UsersInlineMarkup
from tgbot.misc.qiwi import create_payment, check_payment
from tgbot.misc.states import BuyProductStorage
from tgbot.models.products import Product
from tgbot.models.users import User


async def beginning_purchase_products(call: CallbackQuery, callback_data: dict, state: FSMContext):
    await call.answer()
    async with state.proxy() as data:
        data['item_id'] = callback_data['item_id']

    await call.message.edit_text('‚úèÔ∏è –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')
    await BuyProductStorage.beginning_product.set()


async def get_quantity(message: Message, state: FSMContext, user: User):
    if message.text.isnumeric() and int(message.text) > 0:
        async with state.proxy() as data:
            item_id = data['item_id']
            data['product_quantity'] = message.text
        sessionmaker = message.bot.get('db')
        quantity = await Product.get_product(sessionmaker, int(item_id))

        if int(message.text) <= quantity.quantity:
            await message.answer('üè† –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏\n–ì–æ—Ä–æ–¥, —É–ª–∏—Ü—É, –¥–æ–º')
            await BuyProductStorage.get_delivery_adress.set()
        else:
            await message.answer(f'‚ùå –û—à–∏–±–∫–∞!\n–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ\n–í –Ω–∞–ª–∏—á–∏–µ {quantity.quantity} —à—Ç')
            if quantity.quantity == 0:
                await state.finish()
                await message.answer(f'üóÇ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=UsersInlineMarkup().menu(user.admin))
    else:
        await message.answer('‚ùå –û—à–∏–±–∫–∞!\n–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞')


async def get_address(message: Message, state: FSMContext, user: User):
    if message.text.isnumeric():
        return await message.answer('‚ùå –û—à–∏–±–∫–∞!\n–ê–¥—Ä–µ—Å –Ω–µ –º–æ–∂–µ—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!')

    await message.answer(f'‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n–û—Å—Ç–∞–ª–æ—Å—å –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä!\n\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ',
                         reply_markup=ToolsInlineMarkup().product_payment())
    async with state.proxy() as data:
        data['product_address'] = message.text
    await BuyProductStorage.payment_product.set()


async def send_message_admin(product, obj, quantity, address, user_mention):
    config: Config = obj.bot.get('config').tg_bot

    for admin in config.admin_ids:
        await obj.bot.send_message(admin,
                                   f'üéâ –ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞!\n'
                                   f'üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: {user_mention}\n'
                                   f'üè† –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n'
                                   f'üì´ –ê—Ä—Ç–∏–∫–ª: <b><i>{product.item_id}</i></b>\n'
                                   f'üìå –ù–∞–∑–≤–∞–Ω–∏–µ: <b><i>{product.name}</i></b>\n'
                                   f'üíé –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b><i>{quantity}</i></b>\n'
                                   f'üí∞ –¶–µ–Ω–∞: <b><i>{product.price * quantity} ‚ÇΩ</i></b>')


async def payment_product(call: CallbackQuery, state: FSMContext, user: User):
    async with state.proxy() as data:
        item_id = data['item_id']
        quantity = data['product_quantity']
        address = data['product_address']

    sessionmaker = call.bot.get('db')
    await call.answer()
    product = await Product.get_product(sessionmaker, int(item_id))
    amount = int(product.price) * int(quantity)
    action = call.data.split("_")[2]

    if action != "qiwi":
        if user.balance >= int(amount):
            await user.update_user(sessionmaker, updated_fields={'balance': user.balance - int(amount)})
            await Product.update_product(sessionmaker, product.item_id,
                                         updated_fields={'quantity': int(product.quantity) - int(quantity)})
            await call.message.edit_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n'
                                         f'‚úÖ –¢–æ–≤–∞—Ä <b><i>{product.name}</i></b> —É—Å–ø–µ—à–Ω–æ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n'
                                         f'üïë –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É {address}')
            await call.message.answer(f'üóÇ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=UsersInlineMarkup().menu(user.admin))
            await state.finish()
            await send_message_admin(product, call, int(quantity), address, call.from_user.get_mention())
            return

        await call.message.answer('‚ùå –û—à–∏–±–∫–∞!\n–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥–≤—Å—Ç!')

    if int(amount - user.balance) <= 0:
        payment = await create_payment(amount=1, obj=call)
        await call.message.edit_text(f'üìå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Qiwi!\n'
                                     f'üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b><i>{1} ‚ÇΩ</i></b>\n\n'
                                     f'‚ùóÔ∏è <i>–£ –í–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä</i>',
                                     reply_markup=ToolsInlineMarkup().product_payment_qiwi(payment.pay_url,
                                                                                           payment.bill_id))
    else:
        payment = await create_payment(amount=int(amount - user.balance), obj=call)
        await call.message.edit_text(f'üìå –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Qiwi!\n'
                                     f'üí≥ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b><i>{amount - user.balance} ‚ÇΩ</i></b>\n\n'
                                     f'‚ùóÔ∏è <i>–£ –í–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä</i>',
                                     reply_markup=ToolsInlineMarkup().product_payment_qiwi(payment.pay_url,
                                                                                           payment.bill_id))
    await BuyProductStorage.check_payment.set()


async def check_payment_product(call: CallbackQuery, state: FSMContext, callback_data: dict, user: User):
    async with state.proxy() as data:
        item_id = data['item_id']
        quantity = data['product_quantity']
        address = data['product_address']

    sessionmaker = call.bot.get('db')
    bill_id = callback_data['bill_id']
    check = await check_payment(bill_id, call)
    product = await Product.get_product(sessionmaker, int(item_id))
    amount = int(product.price) * int(quantity)

    if check != 'PAID':
        return await call.answer(f'‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!', show_alert=True)

    await user.update_user(sessionmaker, updated_fields={'balance': user.balance - amount})
    await Product.update_product(sessionmaker, product.item_id, updated_fields={'quantity': product.quantity - quantity})
    await call.message.edit_text(f'üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!\n'
                                 f'‚úÖ –¢–æ–≤–∞—Ä <b><i>{product.name}</i></b> —É—Å–ø–µ—à–Ω–æ –±—ã–ª –æ–ø–ª–∞—á–µ–Ω!\n'
                                 f'üïë –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞–¥—Ä–µ—Å—É {address}')
    await call.message.answer(f'üóÇ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>', reply_markup=UsersInlineMarkup().menu(user.admin))
    await state.finish()
    await send_message_admin(product, call, int(quantity), address, call.from_user.get_mention())


def register_buy_product(dp: Dispatcher):
    dp.register_callback_query_handler(beginning_purchase_products, ToolsInlineMarkup.buy_pod.filter())
    dp.register_message_handler(get_quantity, state=BuyProductStorage.beginning_product)
    dp.register_message_handler(get_address, state=BuyProductStorage.get_delivery_adress)
    dp.register_callback_query_handler(payment_product, Text(startswith="to_pay"),
                                       state=BuyProductStorage.payment_product)
    dp.register_callback_query_handler(check_payment_product, ToolsInlineMarkup.bill_cd.filter(),
                                       state=BuyProductStorage.check_payment)
